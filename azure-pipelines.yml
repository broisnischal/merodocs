
# trigger:
# - vms_backend_dev
  
# pool:
#   name: 'vms_agent'
#   demands:
#   - Agent.Name -equals vms_backend_dev_aws

# stages:
# - stage: CodeApproval
#   jobs:
#   - deployment: CodeApproval
#     displayName: 'Code Approval'
#     environment: 'code_approval_backend'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - script: |
#               echo "Code Approval Method executed successfully..."

# - stage: BuildAndDeploy
#   jobs:
#   - job: Build
#     displayName: 'Build'
#     steps:
#     - script: |
#         echo "Current working directory is: $(System.DefaultWorkingDirectory)"
#         echo "Install dependencies using npm"
#         npm install
#         echo "Restarting server for optimizing memory consumption..."
#         pm2 restart all
#         echo "Building the project..."
#         npm run build:dev
#         echo "Installing pm2..."
#         npm install pm2
        
#       displayName: 'Npm install and Build'
#       workingDirectory: $(System.DefaultWorkingDirectory)
#       failOnStderr: false  # Add this line to fail the job if there's an error
    
#     - task: PublishPipelineArtifact@1
#       inputs:
#         targetPath: '$(System.DefaultWorkingDirectory)'
#         artifact: 'vmsbackend_dev_artifact_$(Build.BuildId)'
#       displayName: 'Publish Build Artifacts'
#     - script: |
#         echo "Deploying the project..."

#         # Check if PM2 connection is already established
#         if ! pm2 list | grep -q "vms-backend-dev"; then
#           echo "PM2 process not found. Running 'npm run pm2:dev'..."
#           npm run pm2:dev
#         else
#           echo "PM2 process is already running. Skipping 'npm run pm2'."
#         fi

#         pm2 restart all
#         echo "Deployment successful!"
#       displayName: 'Deploy'
#       workingDirectory: $(System.DefaultWorkingDirectory)

# ci/cd pipeline integration with docker

# trigger:
# - vms_backend_dev
  
# pool:
#   name: 'vms_agent'
#   demands:
#   - Agent.Name -equals vms_backend_dev_aws

# stages:
# - stage: CodeApproval
#   jobs:
#   - deployment: CodeApproval
#     displayName: 'Code Approval'
#     environment: 'code_approval_backend'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - script: |
#               echo "Code Approval Method executed successfully..."

# - stage: BuildAndDeploy
#   jobs:
#   - job: Build
#     displayName: 'Build'
#     steps:
#     - script: |
#         echo "Current working directory is: $(System.DefaultWorkingDirectory)"
#         echo "Deploying the project with Docker..."

#         # Start the Docker containers for the dev environment
#         npm run docker:dev

#         echo "Deployment successful!"
#       displayName: 'Deploy with Docker'
#       workingDirectory: $(System.DefaultWorkingDirectory)
#       failOnStderr: true


trigger:
- vms_backend_dev

pool:
  name: 'vms_agent'
  demands:
  - Agent.Name -equals vms_backend_dev_aws

variables: 
  - group: VMS_BACKEND_DEVELOPMENT_ENV

stages:
- stage: CodeApproval
  jobs:
  - deployment: CodeApproval
    displayName: 'Code Approval'
    environment: 'code_approval_backend'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Code Approval Method executed successfully..."

- stage: BuildAndDeploy
  jobs:
  - job: Build
    displayName: 'Build and Deploy'
    steps:
    - script: |
        echo "Checking for make package..."
        if ! command -v make &> /dev/null
        then
            echo "make is not installed. Installing make..."
            apt-get update
            apt-get install -y make
        else
            echo "make is already installed"
        fi
      displayName: 'Install make'
      failOnStderr: 'false'

    # - script: |
    #     echo "Creating .env file from VMS_BACKEND_DEVELOPMENT_ENV environment variables..."
    #     rm -f .env  # Remove any existing .env file
    #     touch .env  # Ensure the .env file is created

    #     # Copy all environment variables, excluding sensitive ones and common system variables
    #     env | sort | grep -vE "(SYSTEM_|AGENT_|BUILD_|PIPELINE_|RUNNER_|USE_|VSTS_|GIT_|AZP_|DISTRIBUTEDTASK_|ENABLE_|ENDPOINT_|RESOURCES_|ROSETTA2_|SUDO_|TASK_|TF_)" | while IFS='=' read -r name value ; do
    #       # Use printf to handle special characters in the value
    #       printf "%s=%s\n" "$name" "$value" >> .env
    #     done

    #     echo ".env file created successfully"
    #     echo "Contents of .env file (excluding sensitive data):"
    #     cat .env | grep -vE "(PASSWORD|SECRET|KEY|TOKEN)" || true  # Show non-sensitive contents
    #   displayName: 'Create .env file from VMS_BACKEND_DEVELOPMENT_ENV environment variables'
    - script: |
        echo "Creating .env file from specified environment variables..."
        rm -f .env  # Remove any existing .env file

        touch .env  # Create a new .env file

        # Define the list of environment variables to be included
        VARIABLES=(
          "PORT"
          "NODE_ENV"
          "DATABASE_URL"
          "TOKEN_STORE_LIMIT"
          "OTP_SECRET"
          "OTP_TIME_LIMIT"
          "RESET_TIME_LIMIT"
          "ADMIN_RESET_SECRET"
          "SUPERADMIN_RESET_SECRET"
          "FLAT_REQUEST_TIMES"
          "SUPERADMIN_JWT_ACCESS_SECRET"
          "SUPERADMIN_JWT_REFRESH_SECRET"
          "ADMIN_JWT_ACCESS_SECRET"
          "ADMIN_JWT_REFRESH_SECRET"
          "USER_JWT_ACCESS_SECRET"
          "USER_JWT_REFRESH_SECRET"
          "GUARD_JWT_ACCESS_SECRET"
          "GUARD_JWT_REFRESH_SECRET"
          "AWS_ACCESS_KEY_ID"
          "AWS_SECRET_ACCESS_KEY"
          "AWS_REGION"
          "AWS_BUCKET"
          "CLOUDFRONT"
          "HOME_NOTICE_DAYS"
          "EMAIL_SENDER"
          "APARTMENT_INACTIVE_DAYS"
          "CLIENT_ADMIN_PANEL_URL"
          "CLIENT_SUPERADMIN_PANEL_URL"
          "CLIENT_FIREBASE_PROJECT_ID"
          "CLIENT_FIREBASE_PRIVATE_KEY"
          "CLIENT_FIREBASE_CLIENT_EMAIL"
          "GUARD_FIREBASE_PROJECT_ID"
          "GUARD_FIREBASE_PRIVATE_KEY"
          "GUARD_FIREBASE_CLIENT_EMAIL"
          "SPARROW_SMS_TOKEN"
          "SUPERADMIN_EMAIL"
        )

        # Loop through the list and add each variable to the .env file
        for var in "${VARIABLES[@]}"; do
          value=$(printenv $var)
          if [ -n "$value" ]; then
            printf "%s=%s\n" "$var" "$value" >> .env
          fi
        done

        echo ".env file created successfully"
        echo "Contents of .env file (excluding sensitive data):"
        # Show non-sensitive contents
        cat .env
      displayName: 'Create .env file from specified environment variables'

    - script: |
        echo "Current working directory is: $(System.DefaultWorkingDirectory)"
        echo "Deploying the project with Docker... (NODE_ENV: $NODE_ENV)"

         # Clean up the Docker resources
        make clean

        make clean-unused
        
        # Build and start the Docker containers
        # Determine which build to run based on NODE_ENV
        if [ "$NODE_ENV" = "production" ]; then
          echo "Running production build..."
          make build-prod
          echo "Stopping any existing containers..."
          make stop-prod
          echo "Running production..."
          make run-prod
        else
          echo "Running development build..."
          make build-dev
          echo "Stopping any existing containers..."
          make stop-dev
          echo "Running development..."
          make run-dev
        fi

         # Wait for the service to start
        echo "Waiting for service to start..."
        for i in {1..5}; do
        if docker ps | grep -q s-dev; then
          echo "Service is up and running!"
          echo "Deployment successful!"
          # make logs
          exit 0
        fi
        echo "Waiting for service to start... (attempt $i)"
        sleep 10
        done

        echo "Service failed to start within the expected time."
        make logs
        exit 1
      displayName: 'Deploy with Docker'
      workingDirectory: $(System.DefaultWorkingDirectory)
      failOnStderr: "false"